import { EventEmitter } from 'events'
import * as IlpPacket from 'ilp-packet'
import * as ILDCP from 'ilp-protocol-ildcp'
import createLogger, { Logger } from 'ilp-logger'
import * as cryptoHelper from './crypto'
import { Connection, ConnectionOpts } from './connection'
import { ServerConnectionPool } from './pool'
import { Predictor, Writer } from 'oer-utils'
import { Plugin } from './util/plugin-interface'

const DEFAULT_DISCONNECT_DELAY = 100

export interface ServerOpts extends ConnectionOpts {
  serverSecret?: Buffer

  /**
   * Number of milliseconds to wait between closing the server and disconnecting
   * the plugin so packets may be safely returned
   */
  disconnectDelay?: number
}

export interface GenerateAddressSecretOpts {
  connectionTag?: string
  receiptNonce?: Buffer
  receiptSecret?: Buffer
}

/**
 * STREAM Server that can listen on an account and handle multiple incoming [`Connection`s]{@link Connection}.
 * Note: the connections this refers to are over ILP, not over the Internet.
 *
 * The Server operator should give a unique address and secret (generated by calling
 * [`generateAddressAndSecret`]{@link generateAddressAndSecret}) to each client that it expects to connect.
 *
 * The Server will emit a `'connection'` event when the first packet is received for a specific Connection.
 */
export class Server extends EventEmitter {
  protected serverSecret: Buffer
  protected plugin: Plugin
  protected log: Logger
  protected connectionOpts: ConnectionOpts
  protected pendingRequests: Promise<void | Buffer> = Promise.resolve()
  protected disconnectDelay: number
  private pool?: ServerConnectionPool

  constructor(opts: ServerOpts) {
    super()
    this.serverSecret = opts.serverSecret || cryptoHelper.randomBytes(32)
    this.plugin = opts.plugin
    this.log = createLogger('ilp-protocol-stream:Server')
    this.connectionOpts = Object.assign({}, opts, {
      serverSecret: undefined,
    })
    this.disconnectDelay = opts.disconnectDelay || DEFAULT_DISCONNECT_DELAY
  }

  /**
   * Event fired when a new [`Connection`]{@link Connection} is received.
   * The connection event handler should immediately (synchronously) add a
   * `"stream"` event handler to ensure no incoming streams are ignored.
   * @event connection
   * @type {Connection}
   */

  get connected(): boolean {
    return Boolean(this.pool)
  }

  /**
   * Connect the plugin and start listening for incoming connections.
   *
   * When a new connection is accepted, the server will emit the "connection" event.
   *
   * @fires connection
   */
  async listen(): Promise<void> {
    if (this.connected && this.plugin.isConnected()) {
      return
    }
    this.plugin.registerDataHandler((data) => {
      this.emit('_incoming_prepare')
      const request = this.handleData(data)
      this.pendingRequests = this.pendingRequests.then(() => request.finally())
      return request
    })
    await this.plugin.connect()
    const { clientAddress, assetCode, assetScale } = await ILDCP.fetch(
      this.plugin.sendData.bind(this.plugin)
    )
    this.pool = new ServerConnectionPool(
      this.serverSecret,
      {
        ...this.connectionOpts,
        isServer: true,
        plugin: this.plugin,
        sourceAccount: clientAddress,
        assetCode,
        assetScale,
      },
      (connection: Connection) => {
        this.emit('connection', connection)
      }
    )
  }

  /**
   * End all connections and disconnect the plugin
   */
  async close(): Promise<void> {
    if (!this.pool) {
      // We're not connected, so there is nothing to do
      return
    }

    const serverAccount = this.pool.getServerAccount()

    // Stop handling new requests, and return T99 while the connection is closing.
    // If an F02 unreachable was returned on new packets: clients would immediately destroy the connection
    // If an F99 was returned on on new packets: clients would retry with no backoff
    this.plugin.deregisterDataHandler()
    this.plugin.registerDataHandler(async () =>
      IlpPacket.serializeIlpReject({
        code: IlpPacket.Errors.codes.T99_APPLICATION_ERROR,
        triggeredBy: serverAccount,
        message: 'Shutting down server',
        data: Buffer.alloc(0),
      })
    )

    // Wait for in-progress requests to finish so all Fulfills are returned
    await this.pendingRequests
    // Allow the plugin time to send the reply packets back before disconnecting it
    await new Promise((r) => setTimeout(r, this.disconnectDelay))

    // Gracefully close the connection and all streams
    await this.pool.close()

    this.plugin.deregisterDataHandler()
    await this.plugin.disconnect()

    this.emit('_close')
    this.pool = undefined
  }

  /**
   * Resolves when the next connection is accepted.
   *
   * To handle subsequent connections, the user must call `acceptConnection` again.
   * Alternatively, the user can listen on the `'connection'` event.
   */
  async acceptConnection(): Promise<Connection> {
    await this.listen()
    return new Promise((resolve, reject) => {
      const done = (connection: Connection | undefined) => {
        this.removeListener('connection', done)
        this.removeListener('_close', done)
        if (connection) resolve(connection)
        else reject(new Error('server closed'))
      }
      this.once('connection', done)
      this.once('_close', done)
    }) as Promise<Connection>
  }

  /**
   * Generate an address and secret for a specific client to enable them to create a connection to the server.
   *
   * Two different clients SHOULD NOT be given the same address and secret.
   *
   * @param connectionTag Optional connection identifier that will be appended to the ILP address and can be used to identify incoming connections. Can only include characters that can go into an ILP Address
   * @param receiptNonce Optional nonce to include in STREAM receipts
   * @param receiptSecret Optional secret to use for signing STREAM receipts
   */
  generateAddressAndSecret(opts?: string | GenerateAddressSecretOpts): {
    destinationAccount: string
    sharedSecret: Buffer
    receiptsEnabled: boolean
  } {
    if (!this.pool) {
      throw new Error('Server must be connected to generate address and secret')
    }
    let connectionTag = Buffer.alloc(0)
    let receiptNonce = Buffer.alloc(0)
    let receiptSecret = Buffer.alloc(0)
    let receiptsEnabled = false
    if (opts) {
      if (typeof opts === 'object') {
        if (opts.connectionTag) {
          connectionTag = Buffer.from(opts.connectionTag, 'ascii')
        }
        if (!opts.receiptNonce !== !opts.receiptSecret) {
          throw new Error('receiptNonce and receiptSecret must accompany each other')
        }
        if (opts.receiptNonce) {
          if (opts.receiptNonce.length !== 16) {
            throw new Error('receiptNonce must be 16 bytes')
          }
          receiptsEnabled = true
          receiptNonce = opts.receiptNonce
        }
        if (opts.receiptSecret) {
          if (opts.receiptSecret.length !== 32) {
            throw new Error('receiptSecret must be 32 bytes')
          }
          receiptSecret = opts.receiptSecret
        }
      } else {
        connectionTag = Buffer.from(opts, 'ascii')
      }
    }
    const tokenNonce = cryptoHelper.generateTokenNonce()
    const predictor = new Predictor()
    predictor.writeOctetString(tokenNonce, cryptoHelper.TOKEN_NONCE_LENGTH)
    predictor.writeVarOctetString(connectionTag)
    predictor.writeVarOctetString(receiptNonce)
    predictor.writeVarOctetString(receiptSecret)
    const writer = new Writer(predictor.length)
    writer.writeOctetString(tokenNonce, cryptoHelper.TOKEN_NONCE_LENGTH)
    writer.writeVarOctetString(connectionTag)
    writer.writeVarOctetString(receiptNonce)
    writer.writeVarOctetString(receiptSecret)

    const token = cryptoHelper.encryptConnectionAddressToken(this.serverSecret, writer.getBuffer())
    const sharedSecret = cryptoHelper.generateSharedSecretFromToken(this.serverSecret, token)
    return {
      // TODO should this be called serverAccount or serverAddress instead?
      destinationAccount: `${this.pool.getServerAccount()}.${base64url(token)}`,
      sharedSecret,
      receiptsEnabled,
    }
  }

  get assetCode(): string {
    if (!this.pool) {
      throw new Error('Server must be connected to get asset code.')
    }
    return this.pool.getAssetCode()
  }

  get assetScale(): number {
    if (!this.pool) {
      throw new Error('Server must be connected to get asset scale.')
    }
    return this.pool.getAssetScale()
  }

  /**
   * Parse incoming ILP Prepare packets and pass them to the correct connection
   */
  protected async handleData(data: Buffer): Promise<Buffer> {
    if (!this.pool) {
      throw new Error('Unexpected call to handleData - server is not connected')
    }

    try {
      let prepare: IlpPacket.IlpPrepare
      try {
        prepare = IlpPacket.deserializeIlpPrepare(data)
      } catch (err) {
        this.log.error('got data that is not an ILP Prepare packet: %h', data)
        return IlpPacket.serializeIlpReject({
          code: 'F00',
          message: `Expected an ILP Prepare packet (type 12), but got packet with type: ${data[0]}`,
          data: Buffer.alloc(0),
          triggeredBy: this.pool.getServerAccount(),
        })
      }

      const localAddressParts = prepare.destination
        .replace(`${this.pool.getServerAccount()}.`, '')
        .split('.')
      if (localAddressParts.length === 0 || !localAddressParts[0]) {
        this.log.error(
          'destination in ILP Prepare packet does not have a Connection ID: %s',
          prepare.destination
        )
        /* Why no error message here?
        We return an empty message here because we want to minimize the amount of information sent unencrypted
        that identifies this protocol and specific implementation for the rest of the network. For example,
        if every implementation returns a slightly different message here, you could determine what type of
        endpoint is listening on a particular ILP address just by changing the last character of the destination
        in a packet and seeing what error message you get back.
        Apologies if this caused additional debugging time for you! */
        throw new IlpPacket.Errors.UnreachableError('')
      }
      const connectionId = localAddressParts[0]

      const connection = await this.pool
        .getConnection(connectionId, prepare)
        .catch((_err: Error) => {
          // See "Why no error message here?" note above
          throw new IlpPacket.Errors.UnreachableError('')
        })
      const fulfill = await connection.handlePrepare(prepare)
      return IlpPacket.serializeIlpFulfill(fulfill)
    } catch (err) {
      const triggeredBy = this.pool.getServerAccount()

      if (IlpPacket.isIlpError(err)) {
        return IlpPacket.errorToReject(triggeredBy, err)
      } else {
        this.log.error('error handling prepare:', err)

        return IlpPacket.serializeIlpReject({
          // TODO should the default be F00 or T00?
          code: 'F00',
          message: '',
          data: Buffer.alloc(0),
          triggeredBy,
        })
      }
    }
  }
}

/**
 * Creates a [`Server`]{@link Server} and resolves when the server is connected and listening
 */
export async function createServer(opts: ServerOpts): Promise<Server> {
  const server = new Server(opts)
  await server.listen()
  return server
}

function base64url(buffer: Buffer) {
  return buffer.toString('base64').replace(/=+$/, '').replace(/\+/g, '-').replace(/\//g, '_')
}
